#!/bin/bash


#
# This script provides a Dialog box interface for managing Armbian configuration.
#


#
# check for root privileges
#
if [[ $EUID != 0 ]]; then
	echo "This tool requires root privileges. Try again with \"sudo \" please ..." >&2
	sleep 2
	exit 1
fi


#
# load functions, Dynamic directory root
#
bin="$(dirname "${BASH_SOURCE[0]}")"
directory="$(cd "$bin/../" && pwd )"
file_name="$(basename "${BASH_SOURCE[0]}")"
filename="${file_name%.*}"
# Set the path to the mod directory
modpath=$(cd "$directory/lib" && pwd)
json_file="$directory/etc/armbian-config/retro-config.json" || exit 1
json_data=$(cat "$json_file")
libpath="$directory/lib"


#
# load Armbian information
#
[[ -f "/etc/armbian-release" ]] && source /etc/armbian-release
[[ -f "/etc/os-release" ]] && source /etc/os-release


#
# Define the options for the module    
#
declare -A options


#
# Load the module files
#
source_modules() {
    local modpath="$1"
    for file in "$modpath"/*.sh
        do
            if [[ -f "$file" ]]; then
                source "$file" 
                # Merge the module options into the global options  
                for key in "${!module_options[@]}"; do
                    options["$key"]="${module_options[$key]}"
                done
            fi
        done 

} 





if [[ -f "$libpath/config.its.sh" ]] ; then
    source "$libpath/config.its.sh"
else
    source_modules "$libpath/config.its"
fi

#
# Set the dialog command to whiptail or dialog
#
if command -v whiptail &> /dev/null
then
    dialog_cmd="whiptail"
elif command -v dialog &> /dev/null
then
    dialog_cmd="dialog"
else
echo -e "Error: Neither 'dialog' nor 'whiptail' is installed.\n  Please install whiptail for best of them and try again."
exit 1
fi


#
# Function to parse the JSON data ouput to markdown, for documentation
#
function parse_json() {
    # Read the JSON file into a variable
    json=$(cat $directory/etc/armbian-config/retro-config.json)

    # Get the length of the 'menu' array
    length=$(echo "$json" | jq '.menu | length')

    # Iterate over each element in the 'menu' array
    for ((i=0; i<$length; i++)); do
        # Extract the 'id' and 'description' of the current menu
        id=$(echo "$json" | jq -r ".menu[$i].id")
        description=$(echo "$json" | jq -r ".menu[$i].description")

        echo "Menu ID: $id"
        echo "Menu Description: $description"

        # Get the length of the 'sub' array of the current menu
        sub_length=$(echo "$json" | jq ".menu[$i].sub | length")

        # Iterate over each element in the 'sub' array
        for ((j=0; j<$sub_length; j++)); do
            # Extract the 'id', 'description', 'command', 'show', 'network', and 'requirements' of the current submenu
            sub_id=$(echo "$json" | jq -r ".menu[$i].sub[$j].id")
            sub_description=$(echo "$json" | jq -r ".menu[$i].sub[$j].description")
            sub_command=$(echo "$json" | jq -r ".menu[$i].sub[$j].command")
            sub_show=$(echo "$json" | jq -r ".menu[$i].sub[$j].show")
            sub_network=$(echo "$json" | jq -r ".menu[$i].sub[$j].network")
            sub_requirements=$(echo "$json" | jq -r ".menu[$i].sub[$j].requirements[]")

            echo "  Submenu ID: $sub_id"
            echo "  Submenu Description: $sub_description"
            echo "  Submenu Command: $sub_command"
            echo "  Submenu Show: $sub_show"
            echo "  Submenu Network: $sub_network"
            echo "  Submenu Requirements: $sub_requirements"
            echo
        done
    done
}


#
# Function to parse the key-pairs to a JSON file (WIP)
#
function see_use() {
    mod_message="Usage: \n"
    # Iterate over the options
    for key in "${!options[@]}"; do
        # Split the key into function_name and type
        IFS=',' read -r function_name type <<< "$key"
        # If the type is 'long', append the option to the help message
        if [[ "$type" == "feature" ]]; then
            mod_message+="  ${options["$function_name,desc"]}\n"
            mod_message+="\t${options["$function_name,feature"]} ${options["$function_name,example"]}\n\n"
        fi
    done

    echo -e "$mod_message"

 #   parse_json 
}


#
# Show Help mesaage
#
[[ $1 == "--use" || $1 == "-u" ]] && see_use | show_message && exit 0;


#
# Load the TUI
while true; do
    clear
    generate_top_menu || exit 1
done

exit 0

