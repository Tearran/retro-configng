#!/bin/bash


#
# This script provides a Dialog box interface for managing Armbian configuration.
#


#
# check for root privileges
#
#if [[ $EUID != 0 ]]; then
#	echo "This tool requires root privileges. Try again with \"sudo \" please ..." >&2
#	sleep 2
#	exit 1
#fi


#
# load functions, Dynamic directory root
#
bin="$(dirname "${BASH_SOURCE[0]}")"
directory="$(cd "$bin/../" && pwd )"
file_name="$(basename "${BASH_SOURCE[0]}")"
filename="${file_name%.*}"
# Set the path to the mod directory
modpath=$(cd "$directory/lib" && pwd)
json_file="$directory/etc/armbian-config/retro-config.json" || exit 1
json_data=$(cat "$json_file")
libpath="$directory/lib"
#
# load Armbian information
#
[[ -f "/etc/armbian-release" ]] && source /etc/armbian-release
[[ -f "/etc/os-release" ]] && source /etc/os-release


#
# Define the options for the module    
#
declare -A options


#
# Load the module files
#
source_modules() {
    local modpath="$1"
    for file in "$modpath"/*.sh
        do
            if [[ -f "$file" ]]; then
                source "$file" 
            fi
        done
} # source_modules "./lib..."


if [[ -f "$HOME/.local/lib/config.its.sh" ]] ; then
    source "$libpath/config.its.sh"
else
    source_modules "$libpath/config.its"
fi

#
# Set the dialog command to whiptail or dialog
#
if command -v whiptail &> /dev/null
then
    dialog_cmd="whiptail"
elif command -v dialog &> /dev/null
then
    dialog_cmd="dialog"
else
echo -e "Error: Neither 'dialog' nor 'whiptail' is installed.\n  Please install whiptail for best of them and try again."
exit 1
fi


#
# check for internet connection to install dependencies
#
#get_user_continue "Do you want to continue to the next part of the script?" process_input
#see_ping | show_infobox
#check_hold_status | show_infobox
#get_user_input process_input | show_message
#exit 0

#set_user_input "/path/to/your/file.txt"
#[[ -f "/path/to/your/file.txt" ]] && cat "/path/to/your/file.txt"

#
# Load Mod Help mesaage
#
function see_help() {
    help_message="Usage: ${0##*/} [options] [arguments] \n\nOptions:\n"
    # Iterate over the options
    for key in "${!options[@]}"; do
        # Split the key into function_name and type
        IFS=',' read -r function_name type <<< "$key"
        # If the type is 'long', append the option to the help message
        if [[ "$type" == "long" ]]; then
            #help_message+=" ${options["$function_name,long"]}\n"
            help_message+="  ${options["$function_name,disc"]}\n"
            help_message+="  ${options["$function_name,use"]}\n"
        fi
    done

    echo -e "$help_message"
}


#
# Show Help mesaage
#
[[ $1 == "--help" || $1 == "-h" ]] && see_help | show_message && exit 0;


#
# Load the TUI
while true; do
    generate_top_menu || exit 1
done

exit 0

