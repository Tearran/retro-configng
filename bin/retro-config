#!/bin/bash

# This script provides a Dialog box interface for managing Armbian configuration.
#
#set -x
#
# Enable Dynamic directory root
# Simulate /usr/bin/ and /usr/lib/ directories 
bin="$(dirname "${BASH_SOURCE[0]}")"
directory="$(cd "$bin/../" && pwd )"
file_name="$(basename "${BASH_SOURCE[0]}")"
export filename="${file_name%.*}"
# Set the path to the mod directory
modpath=$(cd "$directory/lib" && pwd)
export suffix="${file_name##*-}"
json_file="$directory/etc/armbian-config/retro-config.json" || exit 1
export json_file
# Armbian information
[[ -f "/etc/armbian-release" ]] && source /etc/armbian-release
[[ -f "/etc/os-release" ]] && source /etc/os-release


#
# Define the options for the module    
declare -A options
# source the module files
for file in "$modpath/config.mod"/*.sh
    do
        if [[ -f "$file" ]]; then
            source "$file" "$file"
            #cat "$file" >> "$directory/$monolith_name"
        fi
    done

#
# Set the dialog command
{
    if command -v whiptail &> /dev/null
    then
        dialog_cmd="whiptail"
    elif command -v dialog &> /dev/null
    then
        dialog_cmd="dialog"
    else
    cat << EOF
  Error: Neither 'dialog' nor 'whiptail' is installed.
  Please install whiptail for best of them and try again.

EOF
	exit 1
    fi
}

#
# Help mesaage
function see_help() {
    help_message="Usage: ${0##*/} [options] [arguments] \n\nOptions:\n"
    # Iterate over the options
    for key in "${!options[@]}"; do
        # Split the key into function_name and type
        IFS=',' read -r function_name type <<< "$key"
        # If the type is 'long', append the option to the help message
        if [[ "$type" == "long" ]]; then
            help_message+=" ${options["$function_name,long"]}\n"
            help_message+="  ${options["$function_name,disc"]}\n"
            help_message+="  ${options["$function_name,use"]}\n"
        fi
    done

    echo -e "$help_message"
}

while (( "$#" )); do
    case "$1" in
        get-deps=*)
            deps="${1#get-deps=}"
            IFS=' ' read -r -a get_deps <<< "$deps"
            # infile rm_dependencies "git nano etc..."
            get_dependencies "${get_deps[@]}"
            shift
            ;;
        rm-deps=*)
            deps="${1#rm-deps=}"
            IFS=' ' read -r -a rm_deps <<< "$deps"
            remove_dependencies "${rm_deps[@]}"
            shift
            ;;
        set-colors=*)
            code="${1#set-colors=}"
            IFS=' ' read -r -a set_colors <<< "$code"
            set_colors "${set_colors[@]}" 
            shift
            ;;
        ping)
            see_ping
            shift
            ;;
        --help|-h)
            see_help
            shift
            ;;
        help)
            parse_json
            shift
            ;;
        *)
            echo "Error: Unsupported flag $1" >&2
            exit 1
            ;;
    esac
done
# if sudo and no option is passed, show the menu
[[ "$(id -u)" == "0" ]] && generate_top_menu
exit 0

