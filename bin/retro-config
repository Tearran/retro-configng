#!/bin/bash


#
# This script provides a Whiptail dialog box interface for managing Armbian configuration.
#


#
# The allowed commads to be run without root privileges not allowed with root privileges
declare -A user_commands
user_commands=(
    ["--help"]="Show this help message"
    ["--readme"]="Update the Features table"
    ["--join"]="Merge the module files into one file"
    ["--split"]="Split the module file into multiple files"
    ["--json"]="Show json like format of the features"
    )


if [[ $EUID != 0 && -z "${user_commands[$1]}" ]]; then
    echo "This requires root privileges. Try again with \"sudo \" please ..." >&2
    sleep 1
    exit 1
fi

if [[ $EUID == 0 && -n "${user_commands[$1]}" ]]; then
    # This command is not allowed with root privileges
    echo "This Option requires normal privileges. Try again without sudo ..." >&2
    sleep 1
    exit 1
fi


#
# load functions, Dynamic directory root
#
bin="$(dirname "${BASH_SOURCE[0]}")"
directory="$(cd "$bin/../" && pwd )"
file_name="$(basename "${BASH_SOURCE[0]}")"
filename="${file_name%.*}"
json_file="$directory/etc/armbian-config/retro-config.json" || exit 1
json_data=$(cat "$json_file")
libpath="$directory/lib"


#
# load Armbian information
#
[[ -f "/etc/armbian-release" ]] && source /etc/armbian-release
[[ -f "/etc/os-release" ]] && source /etc/os-release


#
# Define the options for the loading modules    
#
declare -A module_options


#
# Function to Load the module files
#
source_modules() {
    local modpath="$1"
    for file in "$modpath"/*.sh
    do
        if [[ -f "$file" ]]; then
            source "$file" 
            for key in "${!module_options[@]}"; do
                options["$key"]="${module_options[$key]}"
            done

        fi
    done
} 


#
# If the file config.its.sh exists in the libpath directory, source it
#
if [[ -f "$libpath/config.its.sh" ]] ; then
    #This file is generated by the --join option
    source "$libpath/config.its.sh"
    for key in "${!module_options[@]}"; do
        options["$key"]="${module_options[$key]}"
    done

# If the file does not exist, but the directory config.split exists in the libpath directory, source all .sh files in it
elif [[ -d "$libpath/config.split" ]] ; then
    # This directory is generated by the --split option
    source_modules "$libpath/config.split"
# If neither the file config.its.sh nor the directory config.split exist, but the directory config.its exists in the libpath directory, source all .sh files in it 
else
    # Include these scrits contains the dev module files
    source_modules "$libpath/config.its"
fi


#
# SET the TUI to whiptail 
#
[[ -x "$(command -v whiptail)" ]] && export DIALOG="whiptail"


#
# Show the user level (non sudo) help message for this script
see_use_help() {

    echo "Available commands:"
    for key in "${!user_commands[@]}"; do
        printf "%-10s -\t%s\n" "$key" "${user_commands[$key]}"
    done

}


#
# TODO replace "if conditions" with case and shift, Command line options
#
[[ $1 == "--help" || $1 == "-h" ]] && see_use_help && exit 0;
#
# Generate the EXAMPLES.md file from json
#
[[ $1 == "--json" ]] && generate_json && exit 0;
#
# Generate the README.md file
#
[[ "$1" == "--readme" ]] && generate_readme && exit 0;
#
# Join split the script modules into one file use --join folder/to/join file/to/join.sh
#
[[ "$1" == "--join" ]] && join_scripts  "$libpath/config.its" "$libpath/config.its.sh" && exit 0 ;
[[ "$1" == "--split" ]] && mkdir -p "$libpath/config.split" && split_script "$libpath/config.its.sh" "$libpath/config.split" && exit 0 ;

#
# Load the TUI
while true; do
    clear
    generate_top_menu || exit 1
done

exit 0

