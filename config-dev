#!/bin/bash


#
# This script provides a Whiptail dialog box interface for managing Armbian configuration.
#



# The allowed commands to be run without root privileges
declare -A user_commands
user_commands=(
    ["--readme"]="Update the Features table"
    ["--join"]="Merge the module files into one file"
    ["--split"]="Split the module file into multiple files"
    ["--json"]="Show json like format of the features"
    ["--desktop"]="GUI to change user keyboard settings"
)

# The allowed commands to be run with root privileges
declare -A admin_commands
admin_commands=(
    ["--option"]="(WIP) Sudo options"
)

if [[ -z "$1" ]]; then
    if [[ $EUID == 0 ]]; then
        echo "Running with sudo without any option..." >&2

    else
        echo "This script requires sudo privileges. Try again with sudo ..." >&2
        sleep 1
        exit 1

    fi
elif [[ $EUID == 0 && -n "${user_commands[$1]}" ]]; then
    # This command is not allowed with root privileges
    echo "This Option requires normal privileges. Try again without sudo ..." >&2
    sleep 1
    exit 1

elif [[ $EUID == 0 && -n "${admin_commands[$1]}" ]]; then
    # The script is being run with sudo and an admin command option is provided
    echo "Running with sudo and admin command..." >&2

elif [[ $EUID != 0 && -n "${admin_commands[$1]}" ]]; then
    # The script is being run without sudo and an admin command option is provided
    echo "This Option requires sudo privileges. Try again with sudo ..." >&2
    sleep 1
    exit 1

elif [[ $EUID != 0 && -n "${user_commands[$1]}" ]]; then
    # The script is being run without sudo and a user command option is provided
    echo "Running with user command..." >&2

fi

#
# load functions, Dynamic directory root
#
bin="$(dirname "${BASH_SOURCE[0]}")"
directory="$(cd "$bin/../" && pwd )"
file_name="$(basename "${BASH_SOURCE[0]}")"
filename="${file_name%.*}"


[[ -f "$bin/procedure.json" && ! -f "$directory/etc/configng/procedure.json" ]] && json_file="$bin/procedure.json"
[[ -f "$directory/etc/configng/procedure.json" ]] && json_file="$directory/etc/configng/procedure.json" ;


json_data=$(cat "$json_file")
libpath="$directory/lib"



#
# load Armbian information
#
[[ -f "/etc/armbian-release" ]] && source /etc/armbian-release
[[ -f "/etc/os-release" ]] && source /etc/os-release


#
# Define the options for the loading modules    
#
declare -A module_options


#
# Function to Load the module files
#
source_modules() {
    local modpath="$1"
    for file in "$modpath"*.sh
    do
        if [[ -f "$file" ]]; then
            source "$file" 
			for key in "${!module_options[@]}"; do
				options["$key"]="${module_options[$key]}"
			done
        fi
    done
} 


#
# If the file config.its.sh exists in the libpath directory, source it
#
if [[ -f "$bin/config.its.sh" ]] ; then
    #This file is generated by the --join option
    declare -A module_options
    source "$bin/config.its.sh"
    for key in "${!module_options[@]}"; do
        options["$key"]="${module_options[$key]}"
    done

# If the file does not exist, but the directory config.split exists in the libpath directory, source all .sh files in it
elif [[ -d "$libpath/config.interface/" ]] ; then
    # This directory is generated by the --split option
    source_modules "$libpath/config.interface/"
    for key in "${!module_options[@]}"; do
        options["$key"]="${module_options[$key]}"
    done
fi


#
# SET the TUI to whiptail 
#
[[ -x "$(command -v whiptail)" ]] && export DIALOG="whiptail"


#
# Show the user level (non sudo) help message for this script
see_use_help() {

    echo "Available User commands:"
    for key in "${!user_commands[@]}"; do
        printf "%-10s -\t%s\n" "$key" "${user_commands[$key]}"
    done
    echo -e "\nAvailable Admin commands:"
    for key in "${!admin_commands[@]}"; do
        printf "%-10s -\t%s\n" "$key" "${admin_commands[$key]}"
    done
}

case "$1" in
    "--option")
        # Test sudo option
        echo "Test sudo option"
        ;;
    "--desktop")
        # Desktop keyboard job
        desktop_keyboard
        ;;
    "--help" | "-h")
        # See use help job
        see_use_help
        ;;
    "--json")
        # Generate the EXAMPLES.md file from json job
        generate_json
        ;;
    "--readme")
        # Generate the README.md file job
        generate_readme
        ;;
    "--join")
        # Join split the script modules into one file job
        if [[ -f "$libpath/config.its.sh" ]]; then
            cp "$libpath/config.its.sh" "$libpath/config.its.sh.00"
        fi
        join_scripts "$libpath/config.interface" "$libpath/config.its.sh"
        join_scripts "$libpath/config.interface" "$bin/config.its.sh"
        ;;
    "--split")
        # Split the script modules into separate files job
		mkdir -p "$bin/bin"
		mkdir -p "$bin/etc/configng"
        split_script "$bin/config.its.sh" "$bin/lib/config.interface"
		cp "$bin/config.its.sh" "$bin/lib/config.its.sh"
		cp "$bin/configng-interface" "$bin/bin/configng-interface"
		cp "$bin/procedure.json" "$bin/etc/configng/procedure.json"
        sleep 1
        ;;
    "--restore")
        # Restore the script from backup job
        if [[ -f "$libpath/config.its.sh.bck" ]]; then
            mv "$libpath/config.its.sh.bck" "$libpath/config.its.sh"
            echo "Backup restored."
        else
            echo "No backup file found."
            exit 1
        fi
        ;;
    *)
        # Load the TUI
        while true; do
            #clear
            generate_top_menu || exit 1
        done

        ;;
esac
exit 0
