#!/bin/bash

module_options+=(
["generate_json,feature"]="generate_json"
["generate_json,desc"]="Generate a JSON like format"
["generate_json,example"]="generate_json"

["generate_readme,feature"]="generate_readme"
["generate_readme,desc"]="Generate the README.md file"
["generate_readme,example"]="generate_readme"

)


#
# Function to generate the README.md file
#
generate_readme() {
    echo "Updating README.md."
    # Get the current date
    local current_date=$(date)    

    cat << EOF > "$bin/../README.md"    
# Experiment: Retro-config
This application is a command-line interface that perform various operations. It is open-source and licensed under the GPL.
 
Updated on $current_date.

# Retro config
## Commanline options 
These options do not work with root privileges and go trough a allow list
~~~

user_commands=(
    ["--help"]="Show this help message"
    ["--readme"]="Update the Features table"
    ["--join"]="Merge the module files into one file"
    ["--split"]="Split the module file into multiple files"
    ["--json"]="Show json like format of the features"
    )

~~~
the following commands are --help message
~~~

$(see_use_help)

~~~

## Example of associtive array 
see *.its.sh in lib/config.its
~~~

module_options+=( 
["feature_name,feature"]="feature_name"
["feature_name,desc"]="A short disc"
["feature_name,example"]="some example"

)

~~~

# FEATURES: Table of Contents
## Table generated by said associtive array
"see_use_readme" function in retro-config script
$(see_use_readme)

# JSON: Object
## Opject generated by said associtive array
"generate_json" function in retro-config script
~~~ 
$(generate_json)

~~~

EOF
    # Print a message indicating that README.md has been updated
    echo "README.md has been updated."

}


#
# ouput a json-like format
#
generate_json() {
features=()
for key in "${!module_options[@]}"; do
    if [[ $key == *",feature" ]]; then
        features+=("${module_options[$key]}")
    fi
done

echo "["
for index in "${!features[@]}"; do
    feature=${features[$index]}
    desc_key="${feature},desc"
    example_key="${feature},example"
    desc="${module_options[$desc_key]}"
    example="${module_options[$example_key]}"
    echo "  {"
    echo "    \"feature\": \"$feature\","
    echo "    \"description\": \"$desc\","
    echo "    \"example\": \"$example\""
    if [ $index -ne $(( ${#features[@]}-1 )) ]; then
        echo "  },"
    else
        echo "  }"
    fi
done
echo "]"
}
